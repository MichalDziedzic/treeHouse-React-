{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projekty Github\\\\treeHouse-React-\\\\scoreboard\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport Header from './Header';\nimport Player from './Player';\nimport AddPlayerForm from './AddPlayerForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      players: [{\n        name: \"Guil\",\n        score: 0,\n        id: 1\n      }, {\n        name: \"Treasure\",\n        score: 0,\n        id: 2\n      }, {\n        name: \"Ashley\",\n        score: 0,\n        id: 3\n      }, {\n        name: \"James\",\n        score: 0,\n        id: 4\n      }]\n    };\n\n    this.getHighScore = () => {\n      const scores = this.state.players.map(p => p.score);\n      let higestScore = Math.max(...scores);\n      console.log(scores);\n    };\n\n    this.handleRemovePlayer = id => {\n      this.setState(prevState => {\n        return {\n          players: prevState.players.filter(p => p.id !== id)\n        };\n      });\n    };\n\n    this.prevPlayerId = 4;\n\n    this.handleChangeScore = (delta, index) => {\n      this.setState(prevState => ({\n        score: prevState.players[index].score += delta\n      }));\n    };\n\n    this.addPlayerMethod = name => {\n      this.setState(prevState => {\n        console.log(prevState.players);\n        return {\n          players: [...prevState.players, {\n            name,\n            score: 0,\n            id: this.prevPlayerId += 1\n          }]\n        };\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scoreboard\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        players: this.state.players\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), this.getHighScore, this.state.players.map((player, index) => {\n        return /*#__PURE__*/_jsxDEV(Player, {\n          name: player.name,\n          id: player.id,\n          score: player.score,\n          index: index,\n          handleChangeScore: this.handleChangeScore,\n          removePlayer: this.handleRemovePlayer\n        }, player.id.toString(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 18\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(AddPlayerForm, {\n        addPlayer: this.addPlayerMethod\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["E:/Projekty Github/treeHouse-React-/scoreboard/src/components/App.js"],"names":["React","Component","Header","Player","AddPlayerForm","App","state","players","name","score","id","getHighScore","scores","map","p","higestScore","Math","max","console","log","handleRemovePlayer","setState","prevState","filter","prevPlayerId","handleChangeScore","delta","index","addPlayerMethod","render","player","toString"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Header from './Header';\nimport Player from './Player';\nimport AddPlayerForm from './AddPlayerForm';\n\n\n\nclass App extends Component {\n  state = {\n    players: [\n      {\n        name: \"Guil\",\n        score:0,\n        id: 1\n      },\n      {\n        name: \"Treasure\",\n        score:0,\n        id: 2\n      },\n      {\n        name: \"Ashley\",\n        score:0,\n        id: 3\n      },\n      {\n        name: \"James\",\n        score:0,\n        id: 4\n      }\n    ]\n  };\n  getHighScore = () => {\n    const scores = this.state.players.map( p => p.score );\n    let higestScore=Math.max(...scores);\n    console.log(scores);\n  }\n\n  handleRemovePlayer = (id) => {\n    this.setState( prevState => {\n      return {\n        players: prevState.players.filter(p => p.id !== id)\n      };\n    });\n  }\n  prevPlayerId=4; \n\n  handleChangeScore = (delta,index) => {\n    this.setState( prevState => ({\n        score: prevState.players[index].score += delta\n      }));\n   \n    }\n   addPlayerMethod=(name)=>\n   {\n    this.setState( prevState =>{\n      console.log(prevState.players)\n      return{\n       players:[\n         ...prevState.players,\n         {\n        name,\n        score:0,\n        id:this.prevPlayerId+=1\n      }\n       ]\n    }})\n  }\n\n  render(){\n    return (\n      <div className=\"scoreboard\">\n        <Header  players={this.state.players} />\n  \n        {/* Players list */}\n        {this.getHighScore}\n        {this.state.players.map( (player,index) =>\n        {\n          \n          return(<Player \n            name={player.name}\n            id={player.id}\n            score={player.score}\n            key={player.id.toString()}\n            index={index}\n            handleChangeScore={this.handleChangeScore} \n            removePlayer={this.handleRemovePlayer}           \n          />)\n        })}\n        <AddPlayerForm addPlayer={this.addPlayerMethod}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
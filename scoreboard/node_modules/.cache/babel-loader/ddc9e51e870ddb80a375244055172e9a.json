{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projekty Github\\\\treeHouse-React-\\\\scoreboard\\\\src\\\\components\\\\Stopwatch.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Stopwatch extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isRunning: false,\n      elapsedTime: 0,\n      previousTime: 0\n    };\n\n    this.handleStopwatch = () => {\n      this.setState(prevState => ({\n        isRunning: !prevState.isRunning\n      }));\n      if (!this.setState.isRunning) this.setState({\n        previousTime: Date.now()\n      });\n    };\n\n    this.tick = () => {\n      if (this.state.isRunning) {\n        const now = Date.now();\n        this.setState({\n          previousTime: now,\n          elapsedTime: now - this.state.previousTime\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.intervalID = setInterval(() => this.tick(), 100);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stopwatch\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Stopwatch\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"stopwatch-time\",\n        children: \"0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleStopwatch,\n        children: this.state.isRunning ? 'Stop' : 'Start'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Stopwatch;","map":{"version":3,"sources":["E:/Projekty Github/treeHouse-React-/scoreboard/src/components/Stopwatch.js"],"names":["React","Component","Stopwatch","state","isRunning","elapsedTime","previousTime","handleStopwatch","setState","prevState","Date","now","tick","componentDidMount","intervalID","setInterval","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;;AAEA,MAAMC,SAAN,SAAwBD,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAE9BE,KAF8B,GAExB;AACFC,MAAAA,SAAS,EAAC,KADR;AAEFC,MAAAA,WAAW,EAAC,CAFV;AAGFC,MAAAA,YAAY,EAAC;AAHX,KAFwB;;AAAA,SAO9BC,eAP8B,GAOd,MAChB;AACI,WAAKC,QAAL,CAAeC,SAAD,KAAc;AAACL,QAAAA,SAAS,EAAC,CAACK,SAAS,CAACL;AAAtB,OAAd,CAAd;AAEA,UAAG,CAAC,KAAKI,QAAL,CAAcJ,SAAlB,EACI,KAAKI,QAAL,CAAc;AAACF,QAAAA,YAAY,EAACI,IAAI,CAACC,GAAL;AAAd,OAAd;AACP,KAb6B;;AAAA,SAkB9BC,IAlB8B,GAkBvB,MACP;AACG,UAAG,KAAKT,KAAL,CAAWC,SAAd,EACA;AACI,cAAMO,GAAG,GAACD,IAAI,CAACC,GAAL,EAAV;AACA,aAAKH,QAAL,CAAc;AACVF,UAAAA,YAAY,EAACK,GADH;AAEVN,UAAAA,WAAW,EAAEM,GAAG,GAAG,KAAKR,KAAL,CAAWG;AAFpB,SAAd;AAIH;AACH,KA5B6B;AAAA;;AAc9BO,EAAAA,iBAAiB,GACjB;AACI,SAAKC,UAAL,GAAgBC,WAAW,CAAC,MAAK,KAAKH,IAAL,EAAN,EAAkB,GAAlB,CAA3B;AACH;;AAYDI,EAAAA,MAAM,GACN;AACI,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAM,QAAA,SAAS,EAAC,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAQ,QAAA,OAAO,EAAE,KAAKT,eAAtB;AAAA,kBACE,KAAKJ,KAAL,CAAWC,SAAX,GAAuB,MAAvB,GAAgC;AADlC;AAAA;AAAA;AAAA;AAAA,cAHJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAWH;;AA1C6B;;AA6ClC,eAAeF,SAAf","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Stopwatch extends Component {\r\n\r\n    state={\r\n        isRunning:false,\r\n        elapsedTime:0,\r\n        previousTime:0,\r\n    }\r\n    handleStopwatch=()=>\r\n    {\r\n        this.setState((prevState)=>({isRunning:!prevState.isRunning}));\r\n       \r\n        if(!this.setState.isRunning)\r\n            this.setState({previousTime:Date.now()})\r\n    }\r\n    componentDidMount()\r\n    {\r\n        this.intervalID=setInterval(() =>this.tick(),100);\r\n    }\r\n    tick = () => \r\n    {\r\n       if(this.state.isRunning)\r\n       {\r\n           const now=Date.now();\r\n           this.setState({\r\n               previousTime:now,\r\n               elapsedTime:(now - this.state.previousTime)\r\n           })\r\n       }\r\n    }\r\n    render()\r\n    {\r\n        return(\r\n            <div className=\"stopwatch\">\r\n                <h2>Stopwatch</h2>\r\n                <span className=\"stopwatch-time\">0</span>\r\n                <button onClick={this.handleStopwatch}>\r\n                { this.state.isRunning ? 'Stop' : 'Start'}\r\n                </button> \r\n                <button>Reset</button>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\nexport default Stopwatch ;"]},"metadata":{},"sourceType":"module"}